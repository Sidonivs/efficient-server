// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef PROTOBUF_INCLUDED_schema_2eproto
#define PROTOBUF_INCLUDED_schema_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto 

namespace protobuf_schema_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_schema_2eproto
namespace esw {
namespace server {
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class OneToAll;
class OneToAllDefaultTypeInternal;
extern OneToAllDefaultTypeInternal _OneToAll_default_instance_;
class OneToOne;
class OneToOneDefaultTypeInternal;
extern OneToOneDefaultTypeInternal _OneToOne_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Reset;
class ResetDefaultTypeInternal;
extern ResetDefaultTypeInternal _Reset_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Walk;
class WalkDefaultTypeInternal;
extern WalkDefaultTypeInternal _Walk_default_instance_;
}  // namespace server
}  // namespace esw
namespace google {
namespace protobuf {
template<> ::esw::server::Location* Arena::CreateMaybeMessage<::esw::server::Location>(Arena*);
template<> ::esw::server::OneToAll* Arena::CreateMaybeMessage<::esw::server::OneToAll>(Arena*);
template<> ::esw::server::OneToOne* Arena::CreateMaybeMessage<::esw::server::OneToOne>(Arena*);
template<> ::esw::server::Request* Arena::CreateMaybeMessage<::esw::server::Request>(Arena*);
template<> ::esw::server::Reset* Arena::CreateMaybeMessage<::esw::server::Reset>(Arena*);
template<> ::esw::server::Response* Arena::CreateMaybeMessage<::esw::server::Response>(Arena*);
template<> ::esw::server::Walk* Arena::CreateMaybeMessage<::esw::server::Walk>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace esw {
namespace server {

enum Response_Status {
  Response_Status_OK = 0,
  Response_Status_ERROR = 1,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_Status_IsValid(int value);
const Response_Status Response_Status_Status_MIN = Response_Status_OK;
const Response_Status Response_Status_Status_MAX = Response_Status_ERROR;
const int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor();
inline const ::std::string& Response_Status_Name(Response_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Status_descriptor(), value);
}
inline bool Response_Status_Parse(
    const ::std::string& name, Response_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.server.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum MsgCase {
    kWalk = 1,
    kOneToOne = 2,
    kOneToAll = 3,
    kReset = 4,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .esw.server.Walk walk = 1;
  bool has_walk() const;
  void clear_walk();
  static const int kWalkFieldNumber = 1;
  private:
  const ::esw::server::Walk& _internal_walk() const;
  public:
  const ::esw::server::Walk& walk() const;
  ::esw::server::Walk* release_walk();
  ::esw::server::Walk* mutable_walk();
  void set_allocated_walk(::esw::server::Walk* walk);

  // .esw.server.OneToOne oneToOne = 2;
  bool has_onetoone() const;
  void clear_onetoone();
  static const int kOneToOneFieldNumber = 2;
  private:
  const ::esw::server::OneToOne& _internal_onetoone() const;
  public:
  const ::esw::server::OneToOne& onetoone() const;
  ::esw::server::OneToOne* release_onetoone();
  ::esw::server::OneToOne* mutable_onetoone();
  void set_allocated_onetoone(::esw::server::OneToOne* onetoone);

  // .esw.server.OneToAll oneToAll = 3;
  bool has_onetoall() const;
  void clear_onetoall();
  static const int kOneToAllFieldNumber = 3;
  private:
  const ::esw::server::OneToAll& _internal_onetoall() const;
  public:
  const ::esw::server::OneToAll& onetoall() const;
  ::esw::server::OneToAll* release_onetoall();
  ::esw::server::OneToAll* mutable_onetoall();
  void set_allocated_onetoall(::esw::server::OneToAll* onetoall);

  // .esw.server.Reset reset = 4;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 4;
  private:
  const ::esw::server::Reset& _internal_reset() const;
  public:
  const ::esw::server::Reset& reset() const;
  ::esw::server::Reset* release_reset();
  ::esw::server::Reset* mutable_reset();
  void set_allocated_reset(::esw::server::Reset* reset);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:esw.server.Request)
 private:
  void set_has_walk();
  void set_has_onetoone();
  void set_has_onetoall();
  void set_has_reset();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MsgUnion {
    MsgUnion() {}
    ::esw::server::Walk* walk_;
    ::esw::server::OneToOne* onetoone_;
    ::esw::server::OneToAll* onetoall_;
    ::esw::server::Reset* reset_;
  } msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Walk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.server.Walk) */ {
 public:
  Walk();
  virtual ~Walk();

  Walk(const Walk& from);

  inline Walk& operator=(const Walk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Walk(Walk&& from) noexcept
    : Walk() {
    *this = ::std::move(from);
  }

  inline Walk& operator=(Walk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Walk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Walk* internal_default_instance() {
    return reinterpret_cast<const Walk*>(
               &_Walk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Walk* other);
  friend void swap(Walk& a, Walk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Walk* New() const final {
    return CreateMaybeMessage<Walk>(NULL);
  }

  Walk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Walk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Walk& from);
  void MergeFrom(const Walk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Walk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .esw.server.Location locations = 1;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 1;
  ::esw::server::Location* mutable_locations(int index);
  ::google::protobuf::RepeatedPtrField< ::esw::server::Location >*
      mutable_locations();
  const ::esw::server::Location& locations(int index) const;
  ::esw::server::Location* add_locations();
  const ::google::protobuf::RepeatedPtrField< ::esw::server::Location >&
      locations() const;

  // repeated uint32 lengths = 2;
  int lengths_size() const;
  void clear_lengths();
  static const int kLengthsFieldNumber = 2;
  ::google::protobuf::uint32 lengths(int index) const;
  void set_lengths(int index, ::google::protobuf::uint32 value);
  void add_lengths(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      lengths() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_lengths();

  // @@protoc_insertion_point(class_scope:esw.server.Walk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::esw::server::Location > locations_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > lengths_;
  mutable int _lengths_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneToOne : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.server.OneToOne) */ {
 public:
  OneToOne();
  virtual ~OneToOne();

  OneToOne(const OneToOne& from);

  inline OneToOne& operator=(const OneToOne& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneToOne(OneToOne&& from) noexcept
    : OneToOne() {
    *this = ::std::move(from);
  }

  inline OneToOne& operator=(OneToOne&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneToOne& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneToOne* internal_default_instance() {
    return reinterpret_cast<const OneToOne*>(
               &_OneToOne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OneToOne* other);
  friend void swap(OneToOne& a, OneToOne& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneToOne* New() const final {
    return CreateMaybeMessage<OneToOne>(NULL);
  }

  OneToOne* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneToOne>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneToOne& from);
  void MergeFrom(const OneToOne& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneToOne* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .esw.server.Location origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  private:
  const ::esw::server::Location& _internal_origin() const;
  public:
  const ::esw::server::Location& origin() const;
  ::esw::server::Location* release_origin();
  ::esw::server::Location* mutable_origin();
  void set_allocated_origin(::esw::server::Location* origin);

  // .esw.server.Location destination = 2;
  bool has_destination() const;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  private:
  const ::esw::server::Location& _internal_destination() const;
  public:
  const ::esw::server::Location& destination() const;
  ::esw::server::Location* release_destination();
  ::esw::server::Location* mutable_destination();
  void set_allocated_destination(::esw::server::Location* destination);

  // @@protoc_insertion_point(class_scope:esw.server.OneToOne)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::esw::server::Location* origin_;
  ::esw::server::Location* destination_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OneToAll : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.server.OneToAll) */ {
 public:
  OneToAll();
  virtual ~OneToAll();

  OneToAll(const OneToAll& from);

  inline OneToAll& operator=(const OneToAll& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OneToAll(OneToAll&& from) noexcept
    : OneToAll() {
    *this = ::std::move(from);
  }

  inline OneToAll& operator=(OneToAll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneToAll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneToAll* internal_default_instance() {
    return reinterpret_cast<const OneToAll*>(
               &_OneToAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OneToAll* other);
  friend void swap(OneToAll& a, OneToAll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OneToAll* New() const final {
    return CreateMaybeMessage<OneToAll>(NULL);
  }

  OneToAll* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OneToAll>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OneToAll& from);
  void MergeFrom(const OneToAll& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneToAll* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .esw.server.Location origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  private:
  const ::esw::server::Location& _internal_origin() const;
  public:
  const ::esw::server::Location& origin() const;
  ::esw::server::Location* release_origin();
  ::esw::server::Location* mutable_origin();
  void set_allocated_origin(::esw::server::Location* origin);

  // @@protoc_insertion_point(class_scope:esw.server.OneToAll)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::esw::server::Location* origin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.server.Reset) */ {
 public:
  Reset();
  virtual ~Reset();

  Reset(const Reset& from);

  inline Reset& operator=(const Reset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reset(Reset&& from) noexcept
    : Reset() {
    *this = ::std::move(from);
  }

  inline Reset& operator=(Reset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reset* internal_default_instance() {
    return reinterpret_cast<const Reset*>(
               &_Reset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Reset* other);
  friend void swap(Reset& a, Reset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reset* New() const final {
    return CreateMaybeMessage<Reset>(NULL);
  }

  Reset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reset& from);
  void MergeFrom(const Reset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:esw.server.Reset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.server.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(NULL);
  }

  Location* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:esw.server.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.server.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Status Status;
  static const Status OK =
    Response_Status_OK;
  static const Status ERROR =
    Response_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Response_Status_Status_MIN;
  static const Status Status_MAX =
    Response_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Response_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string errMsg = 2;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // uint64 shortest_path_length = 3;
  void clear_shortest_path_length();
  static const int kShortestPathLengthFieldNumber = 3;
  ::google::protobuf::uint64 shortest_path_length() const;
  void set_shortest_path_length(::google::protobuf::uint64 value);

  // uint64 total_length = 4;
  void clear_total_length();
  static const int kTotalLengthFieldNumber = 4;
  ::google::protobuf::uint64 total_length() const;
  void set_total_length(::google::protobuf::uint64 value);

  // .esw.server.Response.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::esw::server::Response_Status status() const;
  void set_status(::esw::server::Response_Status value);

  // @@protoc_insertion_point(class_scope:esw.server.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::uint64 shortest_path_length_;
  ::google::protobuf::uint64 total_length_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_schema_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .esw.server.Walk walk = 1;
inline bool Request::has_walk() const {
  return msg_case() == kWalk;
}
inline void Request::set_has_walk() {
  _oneof_case_[0] = kWalk;
}
inline void Request::clear_walk() {
  if (has_walk()) {
    delete msg_.walk_;
    clear_has_msg();
  }
}
inline const ::esw::server::Walk& Request::_internal_walk() const {
  return *msg_.walk_;
}
inline ::esw::server::Walk* Request::release_walk() {
  // @@protoc_insertion_point(field_release:esw.server.Request.walk)
  if (has_walk()) {
    clear_has_msg();
      ::esw::server::Walk* temp = msg_.walk_;
    msg_.walk_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::esw::server::Walk& Request::walk() const {
  // @@protoc_insertion_point(field_get:esw.server.Request.walk)
  return has_walk()
      ? *msg_.walk_
      : *reinterpret_cast< ::esw::server::Walk*>(&::esw::server::_Walk_default_instance_);
}
inline ::esw::server::Walk* Request::mutable_walk() {
  if (!has_walk()) {
    clear_msg();
    set_has_walk();
    msg_.walk_ = CreateMaybeMessage< ::esw::server::Walk >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:esw.server.Request.walk)
  return msg_.walk_;
}

// .esw.server.OneToOne oneToOne = 2;
inline bool Request::has_onetoone() const {
  return msg_case() == kOneToOne;
}
inline void Request::set_has_onetoone() {
  _oneof_case_[0] = kOneToOne;
}
inline void Request::clear_onetoone() {
  if (has_onetoone()) {
    delete msg_.onetoone_;
    clear_has_msg();
  }
}
inline const ::esw::server::OneToOne& Request::_internal_onetoone() const {
  return *msg_.onetoone_;
}
inline ::esw::server::OneToOne* Request::release_onetoone() {
  // @@protoc_insertion_point(field_release:esw.server.Request.oneToOne)
  if (has_onetoone()) {
    clear_has_msg();
      ::esw::server::OneToOne* temp = msg_.onetoone_;
    msg_.onetoone_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::esw::server::OneToOne& Request::onetoone() const {
  // @@protoc_insertion_point(field_get:esw.server.Request.oneToOne)
  return has_onetoone()
      ? *msg_.onetoone_
      : *reinterpret_cast< ::esw::server::OneToOne*>(&::esw::server::_OneToOne_default_instance_);
}
inline ::esw::server::OneToOne* Request::mutable_onetoone() {
  if (!has_onetoone()) {
    clear_msg();
    set_has_onetoone();
    msg_.onetoone_ = CreateMaybeMessage< ::esw::server::OneToOne >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:esw.server.Request.oneToOne)
  return msg_.onetoone_;
}

// .esw.server.OneToAll oneToAll = 3;
inline bool Request::has_onetoall() const {
  return msg_case() == kOneToAll;
}
inline void Request::set_has_onetoall() {
  _oneof_case_[0] = kOneToAll;
}
inline void Request::clear_onetoall() {
  if (has_onetoall()) {
    delete msg_.onetoall_;
    clear_has_msg();
  }
}
inline const ::esw::server::OneToAll& Request::_internal_onetoall() const {
  return *msg_.onetoall_;
}
inline ::esw::server::OneToAll* Request::release_onetoall() {
  // @@protoc_insertion_point(field_release:esw.server.Request.oneToAll)
  if (has_onetoall()) {
    clear_has_msg();
      ::esw::server::OneToAll* temp = msg_.onetoall_;
    msg_.onetoall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::esw::server::OneToAll& Request::onetoall() const {
  // @@protoc_insertion_point(field_get:esw.server.Request.oneToAll)
  return has_onetoall()
      ? *msg_.onetoall_
      : *reinterpret_cast< ::esw::server::OneToAll*>(&::esw::server::_OneToAll_default_instance_);
}
inline ::esw::server::OneToAll* Request::mutable_onetoall() {
  if (!has_onetoall()) {
    clear_msg();
    set_has_onetoall();
    msg_.onetoall_ = CreateMaybeMessage< ::esw::server::OneToAll >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:esw.server.Request.oneToAll)
  return msg_.onetoall_;
}

// .esw.server.Reset reset = 4;
inline bool Request::has_reset() const {
  return msg_case() == kReset;
}
inline void Request::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void Request::clear_reset() {
  if (has_reset()) {
    delete msg_.reset_;
    clear_has_msg();
  }
}
inline const ::esw::server::Reset& Request::_internal_reset() const {
  return *msg_.reset_;
}
inline ::esw::server::Reset* Request::release_reset() {
  // @@protoc_insertion_point(field_release:esw.server.Request.reset)
  if (has_reset()) {
    clear_has_msg();
      ::esw::server::Reset* temp = msg_.reset_;
    msg_.reset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::esw::server::Reset& Request::reset() const {
  // @@protoc_insertion_point(field_get:esw.server.Request.reset)
  return has_reset()
      ? *msg_.reset_
      : *reinterpret_cast< ::esw::server::Reset*>(&::esw::server::_Reset_default_instance_);
}
inline ::esw::server::Reset* Request::mutable_reset() {
  if (!has_reset()) {
    clear_msg();
    set_has_reset();
    msg_.reset_ = CreateMaybeMessage< ::esw::server::Reset >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:esw.server.Request.reset)
  return msg_.reset_;
}

inline bool Request::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Request::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Request::MsgCase Request::msg_case() const {
  return Request::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Walk

// repeated .esw.server.Location locations = 1;
inline int Walk::locations_size() const {
  return locations_.size();
}
inline void Walk::clear_locations() {
  locations_.Clear();
}
inline ::esw::server::Location* Walk::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:esw.server.Walk.locations)
  return locations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::esw::server::Location >*
Walk::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:esw.server.Walk.locations)
  return &locations_;
}
inline const ::esw::server::Location& Walk::locations(int index) const {
  // @@protoc_insertion_point(field_get:esw.server.Walk.locations)
  return locations_.Get(index);
}
inline ::esw::server::Location* Walk::add_locations() {
  // @@protoc_insertion_point(field_add:esw.server.Walk.locations)
  return locations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::esw::server::Location >&
Walk::locations() const {
  // @@protoc_insertion_point(field_list:esw.server.Walk.locations)
  return locations_;
}

// repeated uint32 lengths = 2;
inline int Walk::lengths_size() const {
  return lengths_.size();
}
inline void Walk::clear_lengths() {
  lengths_.Clear();
}
inline ::google::protobuf::uint32 Walk::lengths(int index) const {
  // @@protoc_insertion_point(field_get:esw.server.Walk.lengths)
  return lengths_.Get(index);
}
inline void Walk::set_lengths(int index, ::google::protobuf::uint32 value) {
  lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:esw.server.Walk.lengths)
}
inline void Walk::add_lengths(::google::protobuf::uint32 value) {
  lengths_.Add(value);
  // @@protoc_insertion_point(field_add:esw.server.Walk.lengths)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Walk::lengths() const {
  // @@protoc_insertion_point(field_list:esw.server.Walk.lengths)
  return lengths_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Walk::mutable_lengths() {
  // @@protoc_insertion_point(field_mutable_list:esw.server.Walk.lengths)
  return &lengths_;
}

// -------------------------------------------------------------------

// OneToOne

// .esw.server.Location origin = 1;
inline bool OneToOne::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
inline void OneToOne::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
}
inline const ::esw::server::Location& OneToOne::_internal_origin() const {
  return *origin_;
}
inline const ::esw::server::Location& OneToOne::origin() const {
  const ::esw::server::Location* p = origin_;
  // @@protoc_insertion_point(field_get:esw.server.OneToOne.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::esw::server::Location*>(
      &::esw::server::_Location_default_instance_);
}
inline ::esw::server::Location* OneToOne::release_origin() {
  // @@protoc_insertion_point(field_release:esw.server.OneToOne.origin)
  
  ::esw::server::Location* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline ::esw::server::Location* OneToOne::mutable_origin() {
  
  if (origin_ == NULL) {
    auto* p = CreateMaybeMessage<::esw::server::Location>(GetArenaNoVirtual());
    origin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:esw.server.OneToOne.origin)
  return origin_;
}
inline void OneToOne::set_allocated_origin(::esw::server::Location* origin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete origin_;
  }
  if (origin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      origin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:esw.server.OneToOne.origin)
}

// .esw.server.Location destination = 2;
inline bool OneToOne::has_destination() const {
  return this != internal_default_instance() && destination_ != NULL;
}
inline void OneToOne::clear_destination() {
  if (GetArenaNoVirtual() == NULL && destination_ != NULL) {
    delete destination_;
  }
  destination_ = NULL;
}
inline const ::esw::server::Location& OneToOne::_internal_destination() const {
  return *destination_;
}
inline const ::esw::server::Location& OneToOne::destination() const {
  const ::esw::server::Location* p = destination_;
  // @@protoc_insertion_point(field_get:esw.server.OneToOne.destination)
  return p != NULL ? *p : *reinterpret_cast<const ::esw::server::Location*>(
      &::esw::server::_Location_default_instance_);
}
inline ::esw::server::Location* OneToOne::release_destination() {
  // @@protoc_insertion_point(field_release:esw.server.OneToOne.destination)
  
  ::esw::server::Location* temp = destination_;
  destination_ = NULL;
  return temp;
}
inline ::esw::server::Location* OneToOne::mutable_destination() {
  
  if (destination_ == NULL) {
    auto* p = CreateMaybeMessage<::esw::server::Location>(GetArenaNoVirtual());
    destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:esw.server.OneToOne.destination)
  return destination_;
}
inline void OneToOne::set_allocated_destination(::esw::server::Location* destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destination_;
  }
  if (destination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:esw.server.OneToOne.destination)
}

// -------------------------------------------------------------------

// OneToAll

// .esw.server.Location origin = 1;
inline bool OneToAll::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
inline void OneToAll::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
}
inline const ::esw::server::Location& OneToAll::_internal_origin() const {
  return *origin_;
}
inline const ::esw::server::Location& OneToAll::origin() const {
  const ::esw::server::Location* p = origin_;
  // @@protoc_insertion_point(field_get:esw.server.OneToAll.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::esw::server::Location*>(
      &::esw::server::_Location_default_instance_);
}
inline ::esw::server::Location* OneToAll::release_origin() {
  // @@protoc_insertion_point(field_release:esw.server.OneToAll.origin)
  
  ::esw::server::Location* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline ::esw::server::Location* OneToAll::mutable_origin() {
  
  if (origin_ == NULL) {
    auto* p = CreateMaybeMessage<::esw::server::Location>(GetArenaNoVirtual());
    origin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:esw.server.OneToAll.origin)
  return origin_;
}
inline void OneToAll::set_allocated_origin(::esw::server::Location* origin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete origin_;
  }
  if (origin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      origin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:esw.server.OneToAll.origin)
}

// -------------------------------------------------------------------

// Reset

// -------------------------------------------------------------------

// Location

// int32 x = 1;
inline void Location::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Location::x() const {
  // @@protoc_insertion_point(field_get:esw.server.Location.x)
  return x_;
}
inline void Location::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:esw.server.Location.x)
}

// int32 y = 2;
inline void Location::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Location::y() const {
  // @@protoc_insertion_point(field_get:esw.server.Location.y)
  return y_;
}
inline void Location::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:esw.server.Location.y)
}

// -------------------------------------------------------------------

// Response

// .esw.server.Response.Status status = 1;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::esw::server::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:esw.server.Response.status)
  return static_cast< ::esw::server::Response_Status >(status_);
}
inline void Response::set_status(::esw::server::Response_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:esw.server.Response.status)
}

// string errMsg = 2;
inline void Response::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::errmsg() const {
  // @@protoc_insertion_point(field_get:esw.server.Response.errMsg)
  return errmsg_.GetNoArena();
}
inline void Response::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:esw.server.Response.errMsg)
}
#if LANG_CXX11
inline void Response::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:esw.server.Response.errMsg)
}
#endif
inline void Response::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:esw.server.Response.errMsg)
}
inline void Response::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:esw.server.Response.errMsg)
}
inline ::std::string* Response::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:esw.server.Response.errMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_errmsg() {
  // @@protoc_insertion_point(field_release:esw.server.Response.errMsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:esw.server.Response.errMsg)
}

// uint64 shortest_path_length = 3;
inline void Response::clear_shortest_path_length() {
  shortest_path_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Response::shortest_path_length() const {
  // @@protoc_insertion_point(field_get:esw.server.Response.shortest_path_length)
  return shortest_path_length_;
}
inline void Response::set_shortest_path_length(::google::protobuf::uint64 value) {
  
  shortest_path_length_ = value;
  // @@protoc_insertion_point(field_set:esw.server.Response.shortest_path_length)
}

// uint64 total_length = 4;
inline void Response::clear_total_length() {
  total_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Response::total_length() const {
  // @@protoc_insertion_point(field_get:esw.server.Response.total_length)
  return total_length_;
}
inline void Response::set_total_length(::google::protobuf::uint64 value) {
  
  total_length_ = value;
  // @@protoc_insertion_point(field_set:esw.server.Response.total_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace esw

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::esw::server::Response_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::esw::server::Response_Status>() {
  return ::esw::server::Response_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_schema_2eproto
